// <auto-generated />
using System;
using CommLinkService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommLinkService.Migrations
{
    [DbContext(typeof(CommLinkDbContext))]
    [Migration("20250821024207_NewMigrationsR")]
    partial class NewMigrationsR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommLinkService.Domain.Entities.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisconnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("TaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Connections_ConnectionId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Connections_CustomerId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Connections_IsActive");

                    b.HasIndex("TaxUserId")
                        .HasDatabaseName("IX_Connections_TaxUserId");

                    b.ToTable("Connections", null, t =>
                        {
                            t.HasCheckConstraint("CK_Connection_ValidUser", "([UserType] = 0 AND [TaxUserId] IS NOT NULL AND [CustomerId] IS NULL) OR ([UserType] = 1 AND [CustomerId] IS NOT NULL AND [TaxUserId] IS NULL)");
                        });
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SenderCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SenderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Messages_RoomId");

                    b.HasIndex("SenderCustomerId")
                        .HasDatabaseName("IX_Messages_SenderCustomerId");

                    b.HasIndex("SenderTaxUserId")
                        .HasDatabaseName("IX_Messages_SenderTaxUserId");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_Messages_SentAt");

                    b.HasIndex("RoomId", "SentAt")
                        .HasDatabaseName("IX_Messages_Room_SentAt");

                    b.ToTable("Messages", null, t =>
                        {
                            t.HasCheckConstraint("CK_Message_ValidSender", "([SenderType] = 0 AND [SenderTaxUserId] IS NOT NULL AND [SenderCustomerId] IS NULL) OR ([SenderType] = 1 AND [SenderCustomerId] IS NOT NULL AND [SenderTaxUserId] IS NULL)");
                        });
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReactedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReactorCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReactorCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReactorTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactorType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("IX_MessageReactions_MessageId");

                    b.HasIndex("ReactorCustomerId")
                        .HasDatabaseName("IX_MessageReactions_ReactorCustomerId");

                    b.HasIndex("ReactorTaxUserId")
                        .HasDatabaseName("IX_MessageReactions_ReactorTaxUserId");

                    b.HasIndex("MessageId", "ReactorCustomerId", "Emoji")
                        .IsUnique()
                        .HasDatabaseName("IX_MessageReactions_Message_Customer_Emoji")
                        .HasFilter("[ReactorCustomerId] IS NOT NULL");

                    b.HasIndex("MessageId", "ReactorTaxUserId", "Emoji")
                        .IsUnique()
                        .HasDatabaseName("IX_MessageReactions_Message_TaxUser_Emoji")
                        .HasFilter("[ReactorTaxUserId] IS NOT NULL");

                    b.ToTable("MessageReactions", null, t =>
                        {
                            t.HasCheckConstraint("CK_MessageReaction_ValidReactor", "([ReactorType] = 0 AND [ReactorTaxUserId] IS NOT NULL AND [ReactorCustomerId] IS NULL) OR ([ReactorType] = 1 AND [ReactorCustomerId] IS NOT NULL AND [ReactorTaxUserId] IS NULL)");
                        });
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedByCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByCompanyId")
                        .HasDatabaseName("IX_Rooms_CreatedByCompanyId");

                    b.HasIndex("CreatedByTaxUserId")
                        .HasDatabaseName("IX_Rooms_CreatedByTaxUserId");

                    b.HasIndex("LastActivityAt")
                        .HasDatabaseName("IX_Rooms_LastActivityAt");

                    b.HasIndex("Type", "IsActive")
                        .HasDatabaseName("IX_Rooms_Type_IsActive");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.RoomParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedByCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVideoEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantType")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("TaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_RoomParticipants_CompanyId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_RoomParticipants_CustomerId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_RoomParticipants_RoomId");

                    b.HasIndex("TaxUserId")
                        .HasDatabaseName("IX_RoomParticipants_TaxUserId");

                    b.HasIndex("RoomId", "CustomerId")
                        .IsUnique()
                        .HasDatabaseName("IX_RoomParticipants_Room_Customer")
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("RoomId", "TaxUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_RoomParticipants_Room_TaxUser")
                        .HasFilter("[TaxUserId] IS NOT NULL");

                    b.ToTable("RoomParticipants", null, t =>
                        {
                            t.HasCheckConstraint("CK_RoomParticipant_ValidParticipant", "([ParticipantType] = 0 AND [TaxUserId] IS NOT NULL AND [CustomerId] IS NULL) OR ([ParticipantType] = 1 AND [CustomerId] IS NOT NULL AND [TaxUserId] IS NULL)");
                        });
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.Message", b =>
                {
                    b.HasOne("CommLinkService.Domain.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.MessageReaction", b =>
                {
                    b.HasOne("CommLinkService.Domain.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.RoomParticipant", b =>
                {
                    b.HasOne("CommLinkService.Domain.Entities.Room", "Room")
                        .WithMany("Participants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("CommLinkService.Domain.Entities.Room", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
