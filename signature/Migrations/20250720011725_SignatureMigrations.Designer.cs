// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace signature.Migrations
{
    [DbContext(typeof(SignatureDbContext))]
    [Migration("20250720011725_SignatureMigrations")]
    partial class SignatureMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.SignatureBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<double>("PositionX")
                        .HasColumnType("float");

                    b.Property<double>("PositionY")
                        .HasColumnType("float");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.HasIndex("SignerId", "PageNumber");

                    b.ToTable("SignatureBoxes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SignatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RejectedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RejectedBySignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignatureRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Signer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsentAgreedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ConsentButtonText")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RejectedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignatureImage")
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("SignatureRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SignedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SignatureRequestId");

                    b.ToTable("Signers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SignatureBox", b =>
                {
                    b.HasOne("Domain.Entities.Signer", "Signer")
                        .WithMany("Boxes")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.IntialEntity", "InitialEntity", b1 =>
                        {
                            b1.Property<Guid>("SignatureBoxId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("HeightIntial")
                                .HasColumnType("float")
                                .HasColumnName("HeightIntial");

                            b1.Property<string>("InitalValue")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)")
                                .HasColumnName("InitialValue");

                            b1.Property<double>("PositionXIntial")
                                .HasColumnType("float")
                                .HasColumnName("PositionXIntial");

                            b1.Property<double>("PositionYIntial")
                                .HasColumnType("float")
                                .HasColumnName("PositionYIntial");

                            b1.Property<double>("WidthIntial")
                                .HasColumnType("float")
                                .HasColumnName("WidthIntial");

                            b1.HasKey("SignatureBoxId");

                            b1.ToTable("SignatureBoxes");

                            b1.WithOwner()
                                .HasForeignKey("SignatureBoxId");
                        });

                    b.OwnsOne("FechaSigner", "FechaSigner", b1 =>
                        {
                            b1.Property<Guid>("SignatureBoxId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FechaValue")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FechaValue");

                            b1.Property<double>("HeightFechaSigner")
                                .HasColumnType("float")
                                .HasColumnName("HeightFechaSigner");

                            b1.Property<double>("PositionXFechaSigner")
                                .HasColumnType("float")
                                .HasColumnName("PositionXFechaSigner");

                            b1.Property<double>("PositionYFechaSigner")
                                .HasColumnType("float")
                                .HasColumnName("PositionYFechaSigner");

                            b1.Property<double>("WidthFechaSigner")
                                .HasColumnType("float")
                                .HasColumnName("WidthFechaSigner");

                            b1.HasKey("SignatureBoxId");

                            b1.ToTable("SignatureBoxes");

                            b1.WithOwner()
                                .HasForeignKey("SignatureBoxId");
                        });

                    b.Navigation("FechaSigner");

                    b.Navigation("InitialEntity");

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("Domain.Entities.Signer", b =>
                {
                    b.HasOne("Domain.Entities.SignatureRequest", null)
                        .WithMany("Signers")
                        .HasForeignKey("SignatureRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DigitalCertificate", "Certificate", b1 =>
                        {
                            b1.Property<Guid>("SignerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("NotAfter")
                                .HasColumnType("datetime2")
                                .HasColumnName("CertNotAfter");

                            b1.Property<DateTime>("NotBefore")
                                .HasColumnType("datetime2")
                                .HasColumnName("CertNotBefore");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("CertSubject");

                            b1.Property<string>("Thumbprint")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("CertThumbprint");

                            b1.HasKey("SignerId");

                            b1.ToTable("Signers");

                            b1.WithOwner()
                                .HasForeignKey("SignerId");
                        });

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Domain.Entities.SignatureRequest", b =>
                {
                    b.Navigation("Signers");
                });

            modelBuilder.Entity("Domain.Entities.Signer", b =>
                {
                    b.Navigation("Boxes");
                });
#pragma warning restore 612, 618
        }
    }
}
