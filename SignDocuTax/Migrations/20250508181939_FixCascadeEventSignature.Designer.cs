// <auto-generated />
using System;
using Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SignDocuTax.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:SignDocuTax/Migrations/20250508181939_FixCascadeEventSignature.Designer.cs
    [Migration("20250508181939_FixCascadeEventSignature")]
    partial class FixCascadeEventSignature
========
    [Migration("20250511223706_InitialCreate")]
    partial class InitialCreate
>>>>>>>> 4b49bd843ef322600271ae0810b969304e69192e:SignDocuTax/Migrations/20250511223706_InitialCreate.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequirementSignatureId")
                        .HasColumnType("int");

                    b.Property<string>("SignedDocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Domain.Signatures.EventSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerRequirementId")
                        .HasColumnType("int");

                    b.Property<string>("AuditTrailJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceOs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DigitalSignatureHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentHashAtSigning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalSignerId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("RequirementSignatureId")
                        .HasColumnType("int");

                    b.Property<int?>("RequirementSignatureId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SignatureEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SignatureImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxUserId")
                        .HasColumnType("int");

                    b.Property<string>("TimestampAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimestampToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerRequirementId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ExternalSignerId");

                    b.HasIndex("RequirementSignatureId");

                    b.HasIndex("RequirementSignatureId1");

                    b.HasIndex("SignatureEventTypeId");

                    b.ToTable("EventSignatures", (string)null);
                });

            modelBuilder.Entity("Domains.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Domains.Firms.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CertificateExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateThumbprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FirmStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequirementSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("SignatureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TaxUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FirmStatusId");

                    b.HasIndex("RequirementSignatureId");

                    b.HasIndex("SignatureTypeId");

                    b.ToTable("Firms", (string)null);
                });

            modelBuilder.Entity("Domains.Firms.FirmStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FirmStatus", (string)null);
                });

            modelBuilder.Entity("Domains.Requirements.AnswerRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequirementSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("TaxUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequirementSignatureId");

                    b.ToTable("AnswerRequirements", (string)null);
                });

            modelBuilder.Entity("Domains.Requirements.RequirementSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("ConsentObtained")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalSignerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalSignerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StatusSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("TaxUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("StatusSignatureId");

                    b.ToTable("RequirementSignatures", (string)null);
                });

            modelBuilder.Entity("Domains.Requirements.StatusRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StatusRequirements", (string)null);
                });

            modelBuilder.Entity("Domains.Signatures.SignatureEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignatureEventTypes", (string)null);
                });

            modelBuilder.Entity("Domains.Signatures.SignatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignatureType", (string)null);
                });

            modelBuilder.Entity("Domains.Signers.ExternalSigner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvitationSentDate")
                        .HasColumnType("datetime2");

<<<<<<<< HEAD:SignDocuTax/Migrations/20250508181939_FixCascadeEventSignature.Designer.cs
                    b.Property<int>("RequirementSignatureId1")
========
                    b.Property<int>("RequirementSignatureId")
>>>>>>>> 4b49bd843ef322600271ae0810b969304e69192e:SignDocuTax/Migrations/20250511223706_InitialCreate.Designer.cs
                        .HasColumnType("int");

                    b.Property<int>("SignatureStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SigningToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DocumentId");

<<<<<<<< HEAD:SignDocuTax/Migrations/20250508181939_FixCascadeEventSignature.Designer.cs
                    b.HasIndex("RequirementSignatureId1");
========
                    b.HasIndex("RequirementSignatureId");
>>>>>>>> 4b49bd843ef322600271ae0810b969304e69192e:SignDocuTax/Migrations/20250511223706_InitialCreate.Designer.cs

                    b.HasIndex("SignatureStatusId");

                    b.ToTable("ExternalSigners", (string)null);
                });

            modelBuilder.Entity("Domains.Signers.SignatureStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignatureStatus");
                });

            modelBuilder.Entity("Domain.Documents.Document", b =>
                {
                    b.HasOne("Domain.Documents.DocumentStatus", "DocumentStatus")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Documents.DocumentType", "DocumentTypes")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DocumentStatus");

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("Domain.Signatures.EventSignature", b =>
                {
                    b.HasOne("Domains.Requirements.AnswerRequirement", "AnswerRequirement")
                        .WithMany("Firms")
                        .HasForeignKey("AnswerRequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Documents.Document", null)
                        .WithMany("EventSignatures")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Signers.ExternalSigner", "ExternalSigner")
                        .WithMany()
                        .HasForeignKey("ExternalSignerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domains.Requirements.RequirementSignature", "RequirementSignature")
                        .WithMany("Firms")
                        .HasForeignKey("RequirementSignatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domains.Requirements.RequirementSignature", null)
                        .WithMany("EventSignatures")
                        .HasForeignKey("RequirementSignatureId1");

                    b.HasOne("Domains.Signatures.SignatureEventType", "SignatureEventType")
                        .WithMany("Firms")
                        .HasForeignKey("SignatureEventTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AnswerRequirement");

                    b.Navigation("ExternalSigner");

                    b.Navigation("RequirementSignature");

                    b.Navigation("SignatureEventType");
                });

            modelBuilder.Entity("Domains.Firms.Firm", b =>
                {
                    b.HasOne("Domains.Firms.FirmStatus", "FirmStatus")
                        .WithMany("Firms")
                        .HasForeignKey("FirmStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domains.Requirements.RequirementSignature", null)
                        .WithMany("Firm")
                        .HasForeignKey("RequirementSignatureId");

                    b.HasOne("Domains.Signatures.SignatureType", "SignatureType")
                        .WithMany("Firms")
                        .HasForeignKey("SignatureTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirmStatus");

                    b.Navigation("SignatureType");
                });

            modelBuilder.Entity("Domains.Requirements.AnswerRequirement", b =>
                {
                    b.HasOne("Domains.Requirements.RequirementSignature", "RequirementSignature")
                        .WithMany("RequiredSignature")
                        .HasForeignKey("RequirementSignatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequirementSignature");
                });

            modelBuilder.Entity("Domains.Requirements.RequirementSignature", b =>
                {
                    b.HasOne("Domain.Documents.Document", "Document")
                        .WithMany("RequirementSignatures")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domains.Requirements.StatusRequirement", "StatusRequirement")
                        .WithMany("RequirementSignatures")
                        .HasForeignKey("StatusSignatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("StatusRequirement");
                });

            modelBuilder.Entity("Domains.Signers.ExternalSigner", b =>
                {
                    b.HasOne("Domains.Contacts.Contact", "Contact")
                        .WithMany("ExternalSigners")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Requirements.RequirementSignature", "RequirementSignature")
                        .WithMany("ExternalSigners")
<<<<<<<< HEAD:SignDocuTax/Migrations/20250508181939_FixCascadeEventSignature.Designer.cs
                        .HasForeignKey("RequirementSignatureId1")
========
                        .HasForeignKey("RequirementSignatureId")
>>>>>>>> 4b49bd843ef322600271ae0810b969304e69192e:SignDocuTax/Migrations/20250511223706_InitialCreate.Designer.cs
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domains.Signers.SignatureStatus", "SignatureStatus")
                        .WithMany()
                        .HasForeignKey("SignatureStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Document");

                    b.Navigation("RequirementSignature");

                    b.Navigation("SignatureStatus");
                });

            modelBuilder.Entity("Domain.Documents.Document", b =>
                {
                    b.Navigation("EventSignatures");

                    b.Navigation("RequirementSignatures");
                });

            modelBuilder.Entity("Domain.Documents.DocumentStatus", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domain.Documents.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domains.Contacts.Contact", b =>
                {
                    b.Navigation("ExternalSigners");
                });

            modelBuilder.Entity("Domains.Firms.FirmStatus", b =>
                {
                    b.Navigation("Firms");
                });

            modelBuilder.Entity("Domains.Requirements.AnswerRequirement", b =>
                {
                    b.Navigation("Firms");
                });

            modelBuilder.Entity("Domains.Requirements.RequirementSignature", b =>
                {
                    b.Navigation("EventSignatures");

                    b.Navigation("ExternalSigners");

                    b.Navigation("Firm");

                    b.Navigation("Firms");

                    b.Navigation("RequiredSignature");
                });

            modelBuilder.Entity("Domains.Requirements.StatusRequirement", b =>
                {
                    b.Navigation("RequirementSignatures");
                });

            modelBuilder.Entity("Domains.Signatures.SignatureEventType", b =>
                {
                    b.Navigation("Firms");
                });

            modelBuilder.Entity("Domains.Signatures.SignatureType", b =>
                {
                    b.Navigation("Firms");
                });
#pragma warning restore 612, 618
        }
    }
}
