// <auto-generated />
using System;
using CustomerService.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250530210205_InitialMigrations")]
    partial class InitialMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerService.Domains.Customers.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLoggin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PreferredContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("PreferredContactId");

                    b.ToTable("ContactInfos", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaritalStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SsnOrItin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("OccupationId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Dependent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Dependents", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.FilingStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FilingStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Single"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "MarriedJoint"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "MarriedSeparate"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "HeadOfHousehold"
                        });
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Single"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Married"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Divorced"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Widowed"
                        });
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Occupations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Designs and develops software applications.",
                            Name = "Software Developer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Prepares and examines financial records.",
                            Name = "Accountant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Instructs students at various educational levels.",
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Provides medical care and support to patients.",
                            Name = "Nurse"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Diagnoses and treats illnesses and injuries.",
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Installs and repairs electrical systems.",
                            Name = "Electrician"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Maintains and repairs water systems.",
                            Name = "Plumber"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Builds and repairs buildings and infrastructure.",
                            Name = "Construction Worker"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Enforces laws and protects citizens.",
                            Name = "Police Officer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Responds to fire and rescue emergencies.",
                            Name = "Firefighter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Transports goods over long distances.",
                            Name = "Truck Driver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Prepares meals and manages kitchen staff.",
                            Name = "Chef"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Handles customer transactions at a store.",
                            Name = "Cashier"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sells products or services to customers.",
                            Name = "Salesperson"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Monitors and protects property and people.",
                            Name = "Security Guard"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cuts, colors, and styles hair.",
                            Name = "Hairdresser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Repairs and maintains vehicles and machinery.",
                            Name = "Mechanic"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cleans and maintains buildings.",
                            Name = "Janitor"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Manages front desk and greets visitors.",
                            Name = "Receptionist"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Handles administrative and clerical tasks.",
                            Name = "Secretary"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Designs and oversees projects in various fields.",
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Builds and maintains websites and web apps.",
                            Name = "Web Developer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Provides legal advice and representation.",
                            Name = "Lawyer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Treats issues related to teeth and oral health.",
                            Name = "Dentist"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Captures images professionally.",
                            Name = "Photographer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Drives clients using the Uber app.",
                            Name = "Uber Driver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Drives clients using the Lyft platform.",
                            Name = "Lyft Driver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Provides transport via digital platforms.",
                            Name = "Rideshare Driver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Delivers food or packages locally.",
                            Name = "Delivery Driver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Transports documents or items locally.",
                            Name = "Courier"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Works independently in various fields.",
                            Name = "Freelancer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Runs their own business or services.",
                            Name = "Self-Employed"
                        });
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.PreferredContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PreferredContacts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Email"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SMS"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Call"
                        });
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Relationships", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Son"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Daughter"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Spouse"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Father"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mother"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Brother"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sister"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grandparent"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            CreatedAt = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.TaxInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankRoutingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FilingStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReturningCustomer")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastYearAGI")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("FilingStatusId");

                    b.ToTable("TaxInformations", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Address", b =>
                {
                    b.HasOne("CustomerService.Domains.Customers.Customer", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("CustomerService.Domains.Customers.Address", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.ContactInfo", b =>
                {
                    b.HasOne("CustomerService.Domains.Customers.Customer", "Customer")
                        .WithOne("Contact")
                        .HasForeignKey("CustomerService.Domains.Customers.ContactInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CustomerService.Domains.Customers.PreferredContact", "PreferredContact")
                        .WithMany("Contacts")
                        .HasForeignKey("PreferredContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PreferredContact");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Customer", b =>
                {
                    b.HasOne("CustomerService.Domains.Customers.MaritalStatus", "MaritalStatus")
                        .WithMany("Customers")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CustomerService.Domains.Customers.Occupation", "Occupation")
                        .WithMany("Customers")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Dependent", b =>
                {
                    b.HasOne("CustomerService.Domains.Customers.Customer", "Customer")
                        .WithMany("Dependents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CustomerService.Domains.Customers.Relationship", "Relationship")
                        .WithMany("Dependents")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.TaxInformation", b =>
                {
                    b.HasOne("CustomerService.Domains.Customers.Customer", "Customer")
                        .WithOne("TaxInfo")
                        .HasForeignKey("CustomerService.Domains.Customers.TaxInformation", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CustomerService.Domains.Customers.FilingStatus", "FilingStatus")
                        .WithMany("TaxInformations")
                        .HasForeignKey("FilingStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FilingStatus");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Dependents");

                    b.Navigation("TaxInfo");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.FilingStatus", b =>
                {
                    b.Navigation("TaxInformations");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.MaritalStatus", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Occupation", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.PreferredContact", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("CustomerService.Domains.Customers.Relationship", b =>
                {
                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
