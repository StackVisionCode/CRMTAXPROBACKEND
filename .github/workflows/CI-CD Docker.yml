# =============================================================
#  CI-CD ▸ Microservicios .NET 9 → Docker → Windows Server 2019
# =============================================================
name: CI-CD Docker (.NET 9)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ---------- Variables globales ----------
env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: jturbi/crmtaxpro
  TAG: ${{ github.sha }}

###############################################################################
# 1) BUILD & PUSH (Ubuntu runner)
###############################################################################
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: jturbi
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push images (.NET 9)
        shell: bash
        run: |
          declare -A DF=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [company-service]=CompanyService/Dockerfile
            [docu-service]=SignDocuTax/Dockerfile
            [email-service]=EmailServices/Dockerfile
          )
          for svc in "${!DF[@]}"; do
            img="$REGISTRY/$REGISTRY_PREFIX-$svc"
            docker build -f "${DF[$svc]}" -t "$img:$TAG" -t "$img:latest" .
            docker push "$img" --all-tags
          done

###############################################################################
# 2) DEPLOY (self-hosted Windows runner)
###############################################################################
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 30

    # Sólo la variable extra que necesitamos
    env:
      COMPOSE_PROJECT_NAME: crmtaxpro

    defaults:
      run:
        shell: powershell

    steps:
      - uses: actions/checkout@v4

      # 0️⃣  Docker Compose v2
      - name: Ensure Docker Compose v2
        run: |
          $dest = "$Env:ProgramFiles\Docker\cli-plugins\docker-compose.exe"
          if (-not (Test-Path $dest)) {
            Invoke-WebRequest -Uri https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-windows-x86_64.exe -OutFile $dest
          }

      # 1️⃣  Añadir NETWORK SERVICE a docker-users si falta
      - name: Ensure Docker service running
        run: |
          $svc = Get-Service docker
          if ($svc.Status -ne 'Running') {
            Start-Service docker
            Start-Sleep -Seconds 6
          }
          if ($needsRestart) {
            Restart-Service docker
            Start-Sleep -Seconds 6
          }

      # 2️⃣  Asegurar daemon Docker activo
      - name: Ensure Docker service running
        run: |
          if ((Get-Service docker).Status -ne 'Running') {
            Start-Service docker
            Start-Sleep -Seconds 6
