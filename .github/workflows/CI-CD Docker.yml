# =============================================================
#  CI-CD ‚ñ∏ Microservicios .NET 9 ‚Üí Docker ‚Üí Ubuntu Server 24.04
# =============================================================
name: CI‚ÄëCD Docker (.NET 9)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: jturbi/crmtaxpro
  TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: üî® Build & Push Images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Configurar Buildx
      - uses: docker/setup-buildx-action@v3

      # Cache de capas Docker
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login en Docker Hub
      - uses: docker/login-action@v3
        with:
          username: jturbi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & Push
      - name: Build & push all images (.NET 9)
        shell: bash
        run: |
          declare -A DF=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [calendar-service]=CalendarService/Dockerfile
            [email-service]=EmailServices/Dockerfile
            [signature-service]=signature/Dockerfile
            [sms-service]=SMSServices/Dockerfile
            [reminder-service]=ReminderService/Dockerfile
            [subscription-service]=SubscriptionsService/Dockerfile
            [auth-migrator]=AuthService/Dockerfile.migrator
            [customer-migrator]=CustomerService/Dockerfile.migrator
            [email-migrator]=EmailServices/Dockerfile.migrator
            [calendar-migrator]=CalendarService/Dockerfile.migrator
            [signature-migrator]=signature/Dockerfile.migrator
            [reminder-migrator]=ReminderService/Dockerfile.migrator
            [sms-migrator]=SMSServices/Dockerfile.migrator
            [subscription-migrator]=SubscriptionsService/Dockerfile.migrator
          )
          total=${#DF[@]}
          current=1

          for svc in "${!DF[@]}"; do
            dockerfile_path="${DF[$svc]}"
            img="$REGISTRY/$REGISTRY_PREFIX-$svc"
            echo "‚ö° Building $img ($current/$total)"

            if ! docker buildx build \
              --file "$dockerfile_path" \
              --tag "$img:$TAG" \
              --tag "$img:latest" \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --push \
              --progress=plain \
              .; then
              echo "‚ùå ERROR: Build failed for $svc"
              exit 1
            fi

            echo "‚úÖ [$current/$total] $svc completado"
            ((current++))
          done

          # Actualizar cache para pr√≥xima ejecuci√≥n
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      # Resumen de im√°genes
      - name: Build summary
        run: |
          echo "## üì¶ Im√°genes construidas" >> $GITHUB_STEP_SUMMARY
          echo "| Servicio           | Imagen                            | Tag      |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------------|-----------------------------------|----------|" >> $GITHUB_STEP_SUMMARY

          services=(
            apigateway auth-service customer-service
            calendar-service email-service signature-service
            auth-migrator customer-migrator
            email-migrator calendar-migrator signature-migrator
          )
          for svc in "${services[@]}"; do
            echo "| $svc | $REGISTRY/$REGISTRY_PREFIX-$svc | $TAG |" >> $GITHUB_STEP_SUMMARY
          done

  deploy:
    name: üöÄ Deploy to Ubuntu Server
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 30

    env:
      COMPOSE_PROJECT_NAME: crmtaxpro

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # Verificar Docker Compose v2
      - name: Ensure Docker Compose v2
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            echo "üõë Docker Compose v2 no est√° instalado. Instala docker-compose-plugin."
            exit 1
          fi

      # Login en Docker Hub
      - name: Docker login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login $REGISTRY -u jturbi --password-stdin

      # Generar .env con variables
      - name: Export vars & create .env
        run: |
          echo "REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}" > .env
          echo "TAG=${{ env.TAG }}"              >> .env
          cat .env

      # ‚ñº Tear down de despliegue previo
      - name: Teardown existing stack
        run: |
          echo "üîª Deteniendo servicios previos..."
          docker compose down --volumes --remove-orphans || true

      # Pull de im√°genes
      - name: Pull all services
        run: |
          docker compose pull || echo "‚ö†Ô∏è Pull fallido para algunos servicios. Continuando..."

      # Levantar servicios
      - name: Up all services
        run: |
          docker compose up -d --remove-orphans

      # Ejecutar migraciones
      - name: Run DB Migrations
        run: |
          for svc in $(docker compose config --services | grep migrator); do
            docker compose run --rm "$svc" || echo "‚ö†Ô∏è Migrator $svc fall√≥"
          done

      # Limpiar im√°genes no usadas
      - name: Cleanup unused images
        run: docker image prune -f
