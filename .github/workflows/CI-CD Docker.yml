# =============================================================
#  CI-CD ▸ Microservicios .NET 9 → Docker → Ubuntu Server 24.04
# =============================================================
name: CI-CD Docker (.NET 9)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ---------- Variables globales ----------
env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: jturbi/crmtaxpro
  TAG: ${{ github.sha }}

###############################################################################
# 1) BUILD & PUSH — runner GitHub (Ubuntu)
###############################################################################
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Setup Buildx (con soporte de caché)
      - uses: docker/setup-buildx-action@v3

      # 2️⃣ Cache para Docker layers
      - name: Docker layer cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 3️⃣ Login DockerHub
      - uses: docker/login-action@v3
        with:
          username: jturbi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4️⃣ Build + Push + Usar cache solo si hay cambios
      - name: Build & push images (.NET 9) with cache
        shell: bash
        run: |
          declare -A DF=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [docu-service]=SignDocuTax/Dockerfile
            [email-service]=EmailServices/Dockerfile
            [auth-migrator]=AuthService/Dockerfile.migrator
            [customer-migrator]=CustomerService/Dockerfile.migrator
            [docu-migrator]=SignDocuTax/Dockerfile.migrator
            [email-migrator]=EmailServices/Dockerfile.migrator
          )
          for svc in "${!DF[@]}"; do
            dockerfile_path="${DF[$svc]}"

            # Si no hay cambios en el path asociado al Dockerfile, omitir
            if ! git diff --name-only origin/main | grep -qE "${dockerfile_path%/*}"; then
              echo "⏩ Skipping $svc (no changes detected)"
              continue
            fi

            img="$REGISTRY/$REGISTRY_PREFIX-$svc"
            echo "⚡ Building $img"

            docker buildx build \
              --file "$dockerfile_path" \
              --tag "$img:$TAG" \
              --tag "$img:latest" \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
              --push \
              .
          done

###############################################################################
# 2) DEPLOY — runner self-hosted (Ubuntu 24.04)
###############################################################################
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 30

    env:
      COMPOSE_PROJECT_NAME: crmtaxpro

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Verificar que Docker Compose v2 esté disponible
      - name: Ensure Docker Compose v2
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            echo "Docker Compose v2 no está instalado. Por favor instala docker-compose-plugin."
            exit 1
          fi

      # 2️⃣ Login en Docker Hub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login $REGISTRY -u jturbi --password-stdin

      # 3️⃣ Exportar variables y generar .env
      - name: Export vars & create .env
        run: |
          echo "REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}" > .env
          echo "TAG=${{ env.TAG }}" >> .env
          cat .env

      # 4️⃣ Descargar imágenes
      - name: Pull images
        run: docker compose pull

      # 5️⃣ Levantar / actualizar contenedores
      - name: Up / update containers
        run: |
          docker compose up -d --remove-orphans
          docker image prune -f

      # 6️⃣ Ejecutar migraciones (por contenedor)
      - name: Run DB Migrations
        run: |
          docker compose run --rm auth-migrator
          docker compose run --rm customer-migrator
          docker compose run --rm docu-migrator
          docker compose run --rm email-migrator
