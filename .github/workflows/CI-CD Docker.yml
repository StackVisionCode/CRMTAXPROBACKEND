name: CI-CD Docker

##############################################################################
# Disparadores
##############################################################################
on:
  push:
    branches: [ main ]          # c√°mbialo si tu rama primaria es otra
  workflow_dispatch:

##############################################################################
# Variables globales
##############################################################################
env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/crmtaxpro
  TAG: ${{ github.sha }}

##############################################################################
# 1) Build & Push (runner Ubuntu gestionado por GitHub)
##############################################################################
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push microservice images
        shell: bash
        run: |
          declare -A DOCKERS=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [docu-service]=SignDocuTax/Dockerfile
            [email-service]=EmailServices/Dockerfile
          )

          for svc in "${!DOCKERS[@]}"; do
            dockerfile="${DOCKERS[$svc]}"
            img="$REGISTRY/$REGISTRY_PREFIX-$svc"

            echo "üî® Building $svc ..."
            docker build -f "$dockerfile" -t "$img:$TAG" -t "$img:latest" .
            echo "üì§ Pushing $img ..."
            docker push "$img" --all-tags
          done

##############################################################################
# 2) Deploy (runner Windows self-hosted)
##############################################################################
  deploy:
    needs: build-and-push
    runs-on: [ self-hosted, Windows, X64 ]   # ‚Üê coincide con WIN-MUKVKVN5NB1
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # ---------------- Docker login ----------------
      - name: Login to Docker Hub
        shell: pwsh
        run: |
          docker login $Env:REGISTRY `
            --username "${{ secrets.DOCKERHUB_USERNAME }}" `
            --password "${{ secrets.DOCKERHUB_TOKEN }}"

      # --------------- Generar archivo .env ----------
      - name: Generate .env for Compose
        shell: pwsh
        run: |
          "REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}" | Out-File -Encoding UTF8 .env
          "TAG=${{ env.TAG }}"                         | Add-Content -Encoding UTF8 .env
          Get-Content .env

      # --------------- Bajar im√°genes nuevas ---------
      - name: Pull images
        shell: pwsh
        run: docker compose -f docker-compose.prod.yml --env-file .env pull

      # --------------- Levantar contenedores ---------
      - name: Up/Update containers
        shell: pwsh
        run: |
          docker compose -f docker-compose.prod.yml --env-file .env up -d --remove-orphans
          docker image prune -f     # limpia capas obsoletas
