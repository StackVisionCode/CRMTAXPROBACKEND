name: CI-CD Docker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Variables comunes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: jturbi/crmtaxpro
  TAG: ${{ github.sha }}

# ============================================================
# 1) Build & Push (Ubuntu runner)
# ============================================================
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: jturbi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push microservice images
        shell: bash
        run: |
          declare -A DOCKERS=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [docu-service]=SignDocuTax/Dockerfile
            [email-service]=EmailServices/Dockerfile
          )
          for svc in "${!DOCKERS[@]}"; do
            dockerfile="${DOCKERS[$svc]}"
            image="$REGISTRY/$REGISTRY_PREFIX-$svc"
            echo "üî® Construyendo la imagen $image ..."
            docker build -f "$dockerfile" -t "$image:$TAG" -t "$image:latest" .
            docker push "$image" --all-tags
          done

# ============================================================
# 2) Deploy (self-hosted Windows runner)
# ============================================================
  deploy:
    needs: build-and-push
    runs-on: [ self-hosted, Windows, X64 ]
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # ---------- Login a Docker Hub ----------
      - name: Login to Docker Hub
        shell: powershell          # ‚Üê aqu√≠
        run: |
          docker login $Env:REGISTRY `
            --username "jturbi" `
            --password "${{ secrets.DOCKERHUB_TOKEN }}"

      # ---------- Generar archivo .env ---------
      - name: Generate .env for Compose
        shell: powershell          # ‚Üê aqu√≠
        run: |
          "REGISTRY_PREFIX=$Env:REGISTRY_PREFIX" | Out-File -Encoding utf8 .env
          "TAG=$Env:TAG" | Add-Content -Encoding utf8 .env
          Get-Content .env

      # ---------- Pull de im√°genes -------------
      - name: Pull images
        shell: powershell          # ‚Üê aqu√≠
        run: docker compose -f docker-compose.prod.yml --env-file .env pull

      # ---------- Up / Update contenedores -----
      - name: Up / Update containers
        shell: powershell          # ‚Üê aqu√≠
        run: |
          docker compose -f docker-compose.prod.yml --env-file .env up -d --remove-orphans
          docker image prune -f


