# =============================================================
#  CI-CD ▸ Microservicios .NET 9 → Docker → Ubuntu Server 24.04
# =============================================================
name: CI-CD Docker (.NET 9)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ---------- Variables globales ----------
env:
  REGISTRY: docker.io
  REGISTRY_PREFIX: jturbi/crmtaxpro
  TAG: ${{ github.sha }}

###############################################################################
# 1) BUILD & PUSH — runner GitHub (Ubuntu)
###############################################################################
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: jturbi
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push images (.NET 9)
        shell: bash
        run: |
          declare -A DF=(
            [apigateway]=ApiGateway/Dockerfile
            [auth-service]=AuthService/Dockerfile
            [customer-service]=CustomerService/Dockerfile
            [company-service]=CompanyService/Dockerfile
            [docu-service]=SignDocuTax/Dockerfile
            [email-service]=EmailServices/Dockerfile
          )
          for svc in "${!DF[@]}"; do
            img="$REGISTRY/$REGISTRY_PREFIX-$svc"
            docker build -f "${DF[$svc]}" -t "$img:$TAG" -t "$img:latest" .
            docker push "$img" --all-tags
          done

###############################################################################
# 2) DEPLOY — runner self-hosted (Ubuntu 24.04)
###############################################################################
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 30

    env:
      COMPOSE_PROJECT_NAME: crmtaxpro   # evita prefijos raros

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Verificar que Docker Compose v2 esté disponible
      - name: Ensure Docker Compose v2
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            echo "Docker Compose v2 no está instalado. Por favor instala docker-compose-plugin."
            exit 1
          fi

      # 2️⃣ Login en Docker Hub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login $REGISTRY -u jturbi --password-stdin

      # 3️⃣ Exportar variables y generar .env
      - name: Export vars & create .env
        run: |
          echo "REGISTRY_PREFIX=${{ env.REGISTRY_PREFIX }}" > .env
          echo "TAG=${{ env.TAG }}" >> .env
          cat .env

      # 4️⃣ Descargar imágenes
      - name: Pull images
        run: docker compose pull

      # 5️⃣ Levantar / actualizar contenedores
      - name: Up / update containers
        run: |
          docker compose up -d --remove-orphans
          docker image prune -f      # limpieza opcional
