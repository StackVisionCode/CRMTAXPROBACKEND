// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SubscriptionsService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domains.CustomModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CustomPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomPlanId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("CustomPlanId", "ModuleId")
                        .IsUnique();

                    b.ToTable("CustomModules", (string)null);
                });

            modelBuilder.Entity("Domains.CustomPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenewed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RenewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RenewedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("CustomPlans", null, t =>
                        {
                            t.HasCheckConstraint("CK_CustomPlans_Price", "[Price] >= 0");

                            t.HasCheckConstraint("CK_CustomPlans_RenewDate", "[RenewDate] IS NOT NULL");

                            t.HasCheckConstraint("CK_CustomPlans_UserLimit", "[UserLimit] >= 1");
                        });
                });

            modelBuilder.Entity("Domains.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Individual and business tax return preparation",
                            IsActive = true,
                            Name = "Tax Returns",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441001"),
                            Url = "/tax-returns"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create and manage invoices",
                            IsActive = true,
                            Name = "Invoicing",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441001"),
                            Url = "/invoicing"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Upload and organize tax documents",
                            IsActive = true,
                            Name = "Document Management",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441001"),
                            Url = "/documents"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Generate financial and tax reports",
                            IsActive = true,
                            Name = "Reports",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441002"),
                            Url = "/reports"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440005"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dedicated portal for client communication",
                            IsActive = true,
                            Name = "Customer Portal",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441002"),
                            Url = "/customer-portal"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440006"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Business insights and analytics",
                            IsActive = true,
                            Name = "Advanced Analytics",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441003"),
                            Url = "/analytics"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440007"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Connect with third-party services",
                            IsActive = true,
                            Name = "API Integration",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441003"),
                            Url = "/api-integration"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440008"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Custom branding options",
                            IsActive = true,
                            Name = "White Label",
                            ServiceId = new Guid("660e8400-e29b-41d4-a716-556655441003"),
                            Url = "/white-label"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440009"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Manage multiple companies from one dashboard",
                            IsActive = true,
                            Name = "Multi-Company Management",
                            Url = "/multi-company"
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-556655440010"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enhanced security features and compliance",
                            IsActive = true,
                            Name = "Advanced Security",
                            Url = "/security"
                        });
                });

            modelBuilder.Entity("Domains.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ServiceLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services", null, t =>
                        {
                            t.HasCheckConstraint("CK_Services_Price", "[Price] >= 0");

                            t.HasCheckConstraint("CK_Services_UserLimit", "[UserLimit] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-556655441001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basic tax preparation service with essential features",
                            Features = "[\"Individual tax returns\",\"Basic invoicing\",\"Document storage\",\"Email support\"]",
                            IsActive = true,
                            Name = "Basic",
                            Price = 29.99m,
                            ServiceLevel = 1,
                            Title = "Basic Plan",
                            UserLimit = 1
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-556655441002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Standard service with additional modules and more users",
                            Features = "[\"Individual \\u0026 business tax returns\",\"Advanced invoicing\",\"Document management\",\"Financial reports\",\"Customer portal\",\"Priority support\"]",
                            IsActive = true,
                            Name = "Standard",
                            Price = 59.99m,
                            ServiceLevel = 2,
                            Title = "Standard Plan",
                            UserLimit = 4
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-556655441003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Professional service with all modules and unlimited features",
                            Features = "[\"All tax return types\",\"Complete invoicing suite\",\"Advanced document management\",\"Comprehensive reports\",\"Full customer portal\",\"Advanced analytics\",\"API integrations\",\"White label options\",\"24/7 premium support\"]",
                            IsActive = true,
                            Name = "Pro",
                            Price = 99.99m,
                            ServiceLevel = 3,
                            Title = "Professional Plan",
                            UserLimit = 5
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-556655441004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unlimited access for system developers and administrators",
                            Features = "[\"Full System Access\",\"Unlimited Users\",\"All Modules\",\"Developer Tools\",\"System Administration\"]",
                            IsActive = true,
                            Name = "Developer",
                            Price = 0m,
                            ServiceLevel = 0,
                            Title = "Developer Access",
                            UserLimit = 2147483647
                        });
                });

            modelBuilder.Entity("Domains.CustomModule", b =>
                {
                    b.HasOne("Domains.CustomPlan", "CustomPlan")
                        .WithMany("CustomModules")
                        .HasForeignKey("CustomPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domains.Module", "Module")
                        .WithMany("CustomModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomPlan");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Domains.Module", b =>
                {
                    b.HasOne("Domains.Service", "Service")
                        .WithMany("Modules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domains.CustomPlan", b =>
                {
                    b.Navigation("CustomModules");
                });

            modelBuilder.Entity("Domains.Module", b =>
                {
                    b.Navigation("CustomModules");
                });

            modelBuilder.Entity("Domains.Service", b =>
                {
                    b.Navigation("Modules");
                });
#pragma warning restore 612, 618
        }
    }
}
