// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmailServices.Migrations
{
    [DbContext(typeof(EmailContext))]
    [Migration("20250816213248_NewMigrationsR")]
    partial class NewMigrationsR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BccAddresses")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcAddresses")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SentByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ToAddresses")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_Emails_CompanyId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("CreatedByTaxUserId")
                        .HasDatabaseName("IX_Emails_CreatedByTaxUserId");

                    b.HasIndex("SentByTaxUserId")
                        .HasDatabaseName("IX_Emails_SentByTaxUserId");

                    b.HasIndex("SentOn");

                    b.HasIndex("CompanyId", "ConfigId")
                        .HasDatabaseName("IX_Emails_CompanyId_ConfigId");

                    b.HasIndex("Status", "CreatedOn");

                    b.HasIndex("CompanyId", "Status", "CreatedOn")
                        .HasDatabaseName("IX_Emails_CompanyId_Status_CreatedOn");

                    b.ToTable("Emails", (string)null);
                });

            modelBuilder.Entity("Domain.EmailAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("IncomingEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_EmailAttachments_CompanyId");

                    b.HasIndex("EmailId");

                    b.HasIndex("IncomingEmailId");

                    b.HasIndex("CompanyId", "EmailId")
                        .HasDatabaseName("IX_EmailAttachments_CompanyId_EmailId");

                    b.ToTable("EmailAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.EmailConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DailyLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<bool?>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("GmailAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmailClientId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GmailClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmailEmailAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GmailRefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GmailTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SmtpPassword")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SmtpUsername")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_EmailConfigs_CompanyId");

                    b.HasIndex("CreatedByTaxUserId")
                        .HasDatabaseName("IX_EmailConfigs_CreatedByTaxUserId");

                    b.HasIndex("CompanyId", "IsActive")
                        .HasDatabaseName("IX_EmailConfigs_CompanyId_IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("EmailConfigs", null, t =>
                        {
                            t.HasCheckConstraint("CK_EmailConfigs_DailyLimit", "[DailyLimit] > 0");

                            t.HasCheckConstraint("CK_EmailConfigs_GmailConfig", "([ProviderType] != 'Gmail') OR ([GmailClientId] IS NOT NULL AND [GmailEmailAddress] IS NOT NULL)");

                            t.HasCheckConstraint("CK_EmailConfigs_SmtpConfig", "([ProviderType] != 'Smtp') OR ([SmtpServer] IS NOT NULL AND [SmtpPort] IS NOT NULL AND [SmtpUsername] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Domain.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TemplateVariables")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_EmailTemplates_CompanyId");

                    b.HasIndex("CreatedByTaxUserId")
                        .HasDatabaseName("IX_EmailTemplates_CreatedByTaxUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("CompanyId", "IsActive")
                        .HasDatabaseName("IX_EmailTemplates_CompanyId_IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailTemplates_CompanyId_Name_Unique");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("Domain.IncomingEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcAddresses")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByTaxUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InReplyTo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ReceivedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("References")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_IncomingEmails_CompanyId");

                    b.HasIndex("ConfigId");

                    b.HasIndex("IsRead");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("IX_IncomingEmails_MessageId");

                    b.HasIndex("ReceivedOn");

                    b.HasIndex("CompanyId", "IsRead")
                        .HasDatabaseName("IX_IncomingEmails_CompanyId_IsRead");

                    b.HasIndex("CompanyId", "ReceivedOn")
                        .HasDatabaseName("IX_IncomingEmails_CompanyId_ReceivedOn");

                    b.HasIndex("MessageId", "ConfigId", "CompanyId")
                        .IsUnique()
                        .HasDatabaseName("IX_IncomingEmails_MessageId_ConfigId_CompanyId_Unique")
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.ToTable("IncomingEmails", (string)null);
                });

            modelBuilder.Entity("Domain.Email", b =>
                {
                    b.HasOne("Domain.EmailConfig", null)
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.EmailAttachment", b =>
                {
                    b.HasOne("Domain.IncomingEmail", null)
                        .WithMany("Attachments")
                        .HasForeignKey("IncomingEmailId");
                });

            modelBuilder.Entity("Domain.IncomingEmail", b =>
                {
                    b.HasOne("Domain.EmailConfig", null)
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.IncomingEmail", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
